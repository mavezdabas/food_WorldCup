Interested_cuisines_world,Household_Income,Age,
Location,Education,Gender,United_States,Mexico,Italy,
China,Japan,England,France,Germany,India,Greece,Thailand)
runApp()
region_TopFood <- topFood %>%
dplyr::group_by(Location) %>%
dplyr::summarise(US = round((mean(United_States == 5,na.rm = TRUE))*100,2),
Mexican = round((mean(Mexico == 5,na.rm = TRUE))*100,2),
Italian  = round((mean(Italy == 5,na.rm = TRUE))*100,2),
Chinese = round((mean(China == 5,na.rm = TRUE))*100,2),
Japnese   = round((mean(Japan == 5,na.rm = TRUE))*100,2),
England  = round((mean(England == 5,na.rm = TRUE))*100,2),
Frence  = round((mean(France == 5,na.rm = TRUE))*100,2),
Germany = round((mean(Germany == 5,na.rm = TRUE))*100,2),
Indian = round((mean(India == 5,na.rm = TRUE))*100,2),
Greece  = round((mean(Greece == 5,na.rm = TRUE))*100,2),
Thai = round((mean(Thailand == 5,na.rm = TRUE))*100),2)
runApp()
runApp()
runApp()
devtools::install_github("timelyportfolio/parcoords")
library(parcoords)
data(mtcars)
parcoords( mtcars )
parcoords( mtcars )
parcoords(
mtcars
, brush = "1d-axes" # 2d-strums are really neat
, reorderable = TRUE
)
parcoords(
mtcars
# , brush = "1d-axes" # 2d-strums are really neat
, brush = "2d-strums" # 2d-strums are really neat
, reorderable = TRUE
)
?parcoords()
parcoords(mtcars,
brush = "1d-axes", # 2d-strums are really neat,
reorderable = TRUE
)
parcoords(mtcars,
# brush = "1d-axes", # 2d-strums are really neat,
reorderable = TRUE
)
mtcars
data( diamonds, package = "ggplot2" )
parcoords(
diamonds[sample(1:nrow(diamonds),1000),]
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
library(dplyr)
diamonds[sample(1:nrow(diamonds),1000),] %>%
mutate( carat = cut(carat, breaks=c(0,1,2,3,4,5), right = T)) %>%
select( carat, color, cut, clarity, depth, table, price,  x, y, z) %>%
parcoords(
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
)
View(mtcars)
topFood
View(topFood)
parcoords( topFood )
parcoords( topFood )
parcoords( head(topFood) )
foodData
View(foodData)
parcoords( foodData )
parcoords(mtcars,
# brush = "1d-axes", # 2d-strums are really neat,
reorderable = TRUE
)
parcoords(foodData,
# brush = "1d-axes", # 2d-strums are really neat,
reorderable = TRUE
)
parcoords(foodData,
# brush = "1d-axes", # 2d-strums are really neat,
reorderable = TRUE
)
summary(mtcars)
summary(foodData)
View(foodData,na.rm = TRUE)
View(foodData,is.na = TRUE)
View(na.omit(foodData))
parcoords(na.omit(foodData))
parcoords(na.omit(foodData),
# brush = "1d-axes", # 2d-strums are really neat,
reorderable = TRUE
)
parcoords(head(na.omit(foodData)),
# brush = "1d-axes", # 2d-strums are really neat,
reorderable = TRUE
)
parcoords(
diamonds[sample(1:nrow(na.omit(foodData)),1000),]
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
parcoords(
diamonds[na.omit(foodData)]
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
parcoords(
na.omit(foodData)
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
View(region_TopFood)
levels(topFood$Level_of_knowledge)
levels(topFood$Household_Income)
levels(topFood$Age)
levels(topFood$Education)
runApp()
parcoords(
na.omit(diamonds)
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
runApp()
runApp()
runApp()
runApp()
foodData <- read.csv("food-world-cup-data.csv",header = TRUE)
runApp()
diamonds
runApp()
colnames(topFood)
data.table(topFood)[, .(Level_of_knowledge, Age)]
data.table(topFood)[Level_of_knowledge, .(Age)]
data.table(topFood)[, .(Level_of_knowledge)]
with(topFood,aggregate(cbind(Age) ~ Level_of_knowledge,FUN=function(x){length(unique(x))}))
with(topFood,aggregate(cbind(Age,Household_Income) ~ Level_of_knowledge,FUN=function(x){length(unique(x))}))
with(topFood,aggregate(cbind(Age,Household_Income) ~ Level_of_knowledge,FUN=function(x){length((x))}))
aggregate(Age~Level_of_knowledge, topFood, FUN=function(x) length(unique(x)))
count(topFood, 'Level_of_knowledge')
xtabs(~ Level_of_knowledge + Age, topFood)
colnames(topFood)
xtabs(~ Level_of_knowledge + Age +Household_Income, topFood)
View(as.data.frame(xtabs(~ Level_of_knowledge + Age +Household_Income, topFood)))
colnames(topFood)
View(as.data.frame(xtabs(~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education +
Gender, topFood)))
parallelData <- as.data.frame(xtabs(~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education +
Gender, topFood))
parcoords(
parallelData
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
parallelData <- as.data.frame(xtabs(~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parcoords(
parallelData
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
runApp()
parallelData <- as.data.frame(xtabs(~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education
+Italy, topFood))
parcoords( parallelData,
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
parcoords( parallelData,
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
parcoords( parallelData,
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
)
parallelData <- as.data.frame(xtabs(Level_of_knowledge ~
Age +
Household_Income +
Location +
Education, topFood))
topFood %>%
dplyr::filter(United_States == "5")
colnames(topFood)
1:8
topFood %>%
dplyr::filter(United_States == "5") %>%
dplyr::select(1:8)
mavez <- topFood %>%
dplyr::filter(United_States == "5") %>%
dplyr::select(1:8)
colnames(topFood)
mavez <- topFood %>%
dplyr::filter(United_States == "5") %>%
dplyr::select(1:8)
parallelData <- as.data.frame(xtabs( ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, mavez)
parcoords( parallelData,
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
)
parcoords( parallelData,
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
)
mavez <- topFood %>%
dplyr::filter(United_States == "5") %>%
dplyr::select(1:8)
parallelData <- as.data.frame(xtabs( ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, mavez))
View(mavez)
View(parallelData)
parcoords( parallelData,
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
)
View(topFood %>%
dplyr::filter(United_States == "5",Mexico == "5",Italy,
China == "5",Japan == "5", England == "5",
France == "5",Germany == "5",India == "5",
Greece == "5",Thailand == "5"))
parallelData <- as.data.frame(xtabs( United_States ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- as.data.frame(xtabs( United_States == "5" ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parcoords( parallelData,
rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = list(
colorBy = "carat"
,colorScale = htmlwidgets::JS("d3.scale.category10()")
)
)
colnames(topFood)
View(region_TopFood)
parcoords(
region_TopFood
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
region_TopFood <- topFood %>%
dplyr::group_by(Location) %>%
dplyr::summarise(US = round((mean(United_States == 5,na.rm = TRUE))*100,2),
Mexican = round((mean(Mexico == 5,na.rm = TRUE))*100,2),
Italian  = round((mean(Italy == 5,na.rm = TRUE))*100,2),
Chinese = round((mean(China == 5,na.rm = TRUE))*100,2),
Japnese   = round((mean(Japan == 5,na.rm = TRUE))*100,2),
England  = round((mean(England == 5,na.rm = TRUE))*100,2),
Frence  = round((mean(France == 5,na.rm = TRUE))*100,2),
Germany = round((mean(Germany == 5,na.rm = TRUE))*100,2),
Indian = round((mean(India == 5,na.rm = TRUE))*100,2),
Greece  = round((mean(Greece == 5,na.rm = TRUE))*100,2),
Thai = round((mean(Thailand == 5,na.rm = TRUE))*100),2)
region_TopFood <- topFood %>%
dplyr::group_by(Location) %>%
dplyr::summarise(US = round((mean(United_States == 5,na.rm = TRUE))*100,2),
Mexican = round((mean(Mexico == 5,na.rm = TRUE))*100,2),
Italian  = round((mean(Italy == 5,na.rm = TRUE))*100,2),
Chinese = round((mean(China == 5,na.rm = TRUE))*100,2),
Japnese   = round((mean(Japan == 5,na.rm = TRUE))*100,2),
England  = round((mean(England == 5,na.rm = TRUE))*100,2),
Frence  = round((mean(France == 5,na.rm = TRUE))*100,2),
Germany = round((mean(Germany == 5,na.rm = TRUE))*100,2),
Indian = round((mean(India == 5,na.rm = TRUE))*100,2),
Greece  = round((mean(Greece == 5,na.rm = TRUE))*100,2),
Thai = round((mean(Thailand == 5,na.rm = TRUE))*100,2))
region_TopFood_Max <- region_TopFood %>%
dplyr::select(-1)
region_TopFood$Best <- colnames(region_TopFood_Max)[apply(region_TopFood_Max,1,which.max)]
region_TopFood$BestPercentage <- apply(region_TopFood_Max,1,max)
region_TopFood <- region_TopFood[1:9,]
rm(region_TopFood_Max)
parcoords(
region_TopFood
, rownames = F # turn off rownames from the data.frame
, brushMode = "2D-strums"
, reorderable = T
, queue = T
, color = RColorBrewer::brewer.pal(4,"BuPu")[4]
)
parallelData <- as.data.frame(xtabs( United_States == "5" ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
rm(mtcars,mavez)
rm(diamonds)
parallelData <- as.data.frame(xtabs( United_States ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- as.data.frame(xtabs( US = United_States ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- as.data.frame(xtabs(  United_States ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- as.data.frame(xtabs(  United_States + Mexico ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- as.data.frame(xtabs(  United_States + Mexico ~Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
colnames(topFood)
runApp()
colnames(topFood)
parallelData <- as.data.frame(xtabs(United_States ~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
colnames(parallelData)
parallelData <- parallelData %>%
dplyr::rename(United_States = Freq)
colnames(parallelData)
parallelData <- as.data.frame(xtabs(United_States ~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- parallelData %>%
dplyr::rename(United_States = Freq)
View(parallelData)
parallelData <- as.data.frame(xtabs(United_States ~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- parallelData %>%
dplyr::rename(United_States = Freq)
View(parallelData)
parallelData <- as.data.frame(xtabs(Mexico ~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- as.data.frame(xtabs(United_States ~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
parallelData <- as.data.frame(xtabs(Mexico ~ Level_of_knowledge +
Age +
Household_Income +
Location +
Education, topFood))
runApp()
?parcoords()
colnames(region_TopFood)
runApp()
runApp()
order(region_TopFood$US)
order(region_TopFood$US)
(region_TopFood$US)
sort(region_TopFood$US)
unique(region_TopFood$US)
sort(unique(region_TopFood$US))
runApp()
runApp()
parcoords(
mtcars,
rownames = TRUE,
brushMode = "1d",
reorderable = TRUE,
dimensions = list(
cyl = list(
tickValues = c(4,6,8)
)
),
tasks = list(
htmlwidgets::JS(sprintf(
"
function(){
debugger
this.parcoords.dimensions()['names']
.yscale = d3.scale.ordinal()
.domain([%s])
.rangePoints([
1,
this.parcoords.height()-this.parcoords.margin().top - this.parcoords.margin().bottom
])
// reverse order of cylinders
this.parcoords.dimensions()['cyl']
.yscale
.domain(
this.parcoords.dimensions()['cyl'].yscale.domain().reverse()
);
this.parcoords.removeAxes();
this.parcoords.render();
// duplicated from the widget js code
//  to make sure reorderable and brushes work
if( this.x.options.reorderable ) {
this.parcoords.reorderable();
} else {
this.parcoords.createAxes();
}
if( this.x.options.brushMode ) {
// reset the brush with None
this.parcoords.brushMode('None')
this.parcoords.brushMode(this.x.options.brushMode);
this.parcoords.brushPredicate(this.x.options.brushPredicate);
}
// delete title from the rownames axis
d3.select('#' + this.el.id + ' .dimension .axis > text').remove();
}
"     ,
paste0(sort(shQuote(rownames(mtcars))),collapse=",")
))
)
)
runApp()
runApp()
